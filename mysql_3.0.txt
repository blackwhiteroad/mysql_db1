一.mysql存储引擎
1.mysql工作原理
1)mysql体系结构
2)mysql存储引擎
2.存储引擎的配置
1)修改表的存储引擎
2)设置表的存储引擎
3.存储引擎特点
1)myisam存储引擎
2)innodb存储引擎
3)mysql锁机制
4)事务特性(acid)

*mysql存储引擎
-作为可插拔式的组件提供
mysql服务软件自带的功能程序,处理表的处理器
不同的存储引擎有不同的功能和数据存储方式
-默认的存储引擎
mysql 5.0/5.1 --> myisam
mysql 5.5/5.6 --> innodb
-列出可用的存储引擎类型
命令格式:show engines;或show engines\G

*修改表的存储引擎
a.建表时手动指定
-未指定时,使用默认存储引擎,可用show create table 表名\G;查看
如下代码展示:
create table yinqing(
name char(20),
age tinyint
)engine=innodb;
b.设置默认存储引擎
修改/etc/my.cnf配置文件
]# vim /etc/my.cnf
[mysql]
... ...
default-storage-engine=myisam
... ...
重启mysql服务
]# systemctl restart mysqld

*myisam存储引擎
-主要特点
支持表级锁
不支持事务,事务回滚,外键
-相关的表文件
表名.frm
表名.MYI
表名.MYD

*innodb存储引擎
-主要特点
支持行级锁
支持事务,事务回滚,外键
-相关的表文件
表名.frm
表名.idb
ibdata1
ib_logfile0
ib_logfile1

*mysql锁机制
-锁粒度
表级锁:一次直接对整张表进行加锁
行级锁:只锁定某一行
页级锁:对整个页面(mysql管理数据的基本存储单位)进行加锁
--锁类型
读锁(共享锁):支持并发读
写锁(互斥锁,排他锁):时独占锁,上锁期间其他线程不能读表或写表
-查看当前的锁状态
命令行:show status like "table_lock%"

*事务特性(acid)
-atomic:原子性
事务的整个操作是一个整体,不可分割,要么全部成功,要么全部失败
-consistency:一致性
事务操作的前后,表中的记录没有变化
-isolation:隔离性
事务操作是相互隔离不受影响的
-durability:持久性
数据一旦提交,不可改变,永久改变数据
注:
]# show variables like "autocommit";	//查看提交状态
]# set autocommit=off;	//关闭自动提交
]# rollback;	//数据回滚
]# commit;	//数据提交

二.数据导入导出
1.设置搜索路径
2.数据导入
3.数据导出

*设置搜索路径
查看默认使用目录级目录是否存在
]# show variables like "secure_file_priv";
+------------------+-----------------------+
| Variable_name    | Value                 |
+------------------+-----------------------+
| secure_file_priv | /var/lib/mysql-files/ |
+------------------+-----------------------+
]# ls -ld /var/lib/mysql-files/
drwxr-x---. 2 mysql mysql 36 11月 20 23:06 /var/lib/mysql-files/
修改目录及查看修改结果
]# mkdir /myload; chown mysql /myload
修改/etc/my.cnf配置文件
]# vim /etc/my.cnf
[mysql]
... ...
secure_file_priv="/myload"
... ...
重启mysql服务
]# systemctl restart mysqld
]# show variables like "secure_file_priv";
+------------------+-----------------------+
| Variable_name    | Value                 |
+------------------+-----------------------+
| secure_file_priv | /myload |
+------------------+-----------------------+

*数据导入
-基本用法
load data infile "目录名/文件名"
into table 表名
fields terminated by "分隔符'
lines termiinated by "\n";
-注意事项
字段分隔符要与文件内的一致
指定导入文件的绝对路径
导入数据的表字段类型要与文件字段匹配
禁用selinux保护机制

*数据导出
-基本用法
SQL查询 into outfile "目录名/文件名"
fields terminated by "分隔符'
lines termiinated by "\n";
-注意事项
导出的内容由SQL查询语句决定
导出的是表中的记录,不包括字段名
禁用selinux保护机制

三.管理表记录
增加表记录
查询表记录
更新表记录
删除表记录

*插入指令格式:
#一次插入一条记录,给记录的所有字段赋值
*insert into 库.表/表 values(值列表);
#一次插入多条记录,给记录的所有字段赋值
*insert into 库.表/表 values(值列表),(值列表);
#一次插入一条记录,给记录的指定字段赋值
*insert into 库.表/表(字段名列表) values(值列表);
#一次插入多条记录,给记录的指定字段赋值
*insert into 库.表/表(字段名列表) values(值列表),(值列表);
-注意事项
字段值要与字段类型相匹配
对于字段类型的字段,要用双或单引号括起来
依次给所有字段赋值时,字段名可以省略
只给一部分字段赋值时,必须明确写出对应的字段名称

2)更新记录指令格式
//批量修改
*update 表名 set 字段名=值,字段名="值";
//修改符合条件的记录字段的值
*update 表名 set 字段名=值,字段名="值" where 条件;
-注意事项
字段值要与字段类型相匹配
对于字段类型的字段,要用双或单引号括起来
若不使用where限定条件,会更新所有记录
限定条件时,只更新匹配条件的记录

3)查询记录指令格式
//查询所有记录指定字段的值
*select 字段列表 from 表名
//查询与条件匹配记录指定字段的值
*select 字段列表 from 表名 where 条件表达式列表
注意事项
使用*可匹配所有字段
指定表名时,可采用库名.表名的形式

4)删除表记录指令格式
//删除表的所有记录
*delete from 表名;
//只删除符合条件的记录
*delete from 表名 where 条件;

四.匹配条件
1.基本匹配条件
1)数值比较
2)字符比较/匹配空/匹配非空
3)逻辑匹配
4)范围匹配/去重显示
2.高级匹配条件
1)模糊查询
2)正则表达式
3)四则运算
3.操作查询结果
1)聚集函数
2)查询结果排序
3)查询结果分组
4)查询结果过滤
5)限制查询结果显示行数

*字符比较/匹配空/匹配非空
字符比较时,字段类型必须字符类型
	类型		用途
	=		相等
	!=		不相等
	is null	匹配空
	is not null	非空

*逻辑匹配
多个判断条件时使用
	类型	用途
	or	逻辑或
	and	逻辑与
	!	逻辑非
	()	提高优先级

*范围匹配/去重显示
	类型				用途
	in (值列表)			在...里...
	not in (值列表)		不在...里...	
	between 数字1 and 数字2	在...之间...
	distinct 字段名		去重显示

*模糊查询
-基本用法
where 字段名 like "通配符"
% 匹配0~N个字符,_匹配单个字符

*正则表达式
-基本用法
where 字段名 regexp "正则表达式"
匹配元字符:^ , $ , . , [] , * , |

*聚集函数
-mysql内置数据统计函数
avg(字段名)		//统计字段平均值
sum(字段名)		//统计字段之和
min(字段名)		//统计字段最小值
max(字段名)		//统计字段最大值
count(字段名)		//统计字段值个数

*查询结果排序
-基本用法
SQL查询 order by 字段名 [asc | desc];	//通常是数值类型字段

*查询结果分组
-基本用法
SQL查询 group by 字段名;	//通常是字符串类型字段

*查询结果过滤
基本用法
SQL查询 having 条件表达式;
SQL查询 where 条件 having 条件表达式;
SQL查询 group by 字段名 having 条件表达式;

*限制查询结果显示行数
基本用法
SQL查询 limit N;	//显示查询结果前n条记录
SQL查询 limit N,M;	//显示查询指定范围内的记录
SQL查询 where 条件查询 limit 3;	//显示查询结果前3条记录
SQL查询 where 条件查询 limit 3,3;	//从第4条开始,共显示3条















